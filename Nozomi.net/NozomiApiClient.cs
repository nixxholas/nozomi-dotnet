// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Collections.Generic;
using System.Net.Http;
using Microsoft.Rest;
using Microsoft.Rest.Serialization;
using Newtonsoft.Json;
using Nozomi.net.Constants;
using Nozomi.net.Interfaces;
using Nozomi.net.Services;

namespace Nozomi.net
{
    public partial class NozomiApiClient : ServiceClient<NozomiApiClient>, INozomiAPI
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        
        /// <summary>
        /// The API Key issued by Nozomi for usage.
        /// </summary>
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }
        
        /// <summary>
        /// Gets or sets the Http Response message.
        /// </summary>
        public HttpResponseMessage HttpResponseMessage { get; set; }

        /// <summary>
        /// Gets the IComponent.
        /// </summary>
        public virtual IComponentService ComponentService { get; private set; }

        /// <summary>
        /// Gets the IComponentHistoricItemService.
        /// </summary>
        public virtual IComponentHistoricItemService ComponentHistoricItemService { get; private set; }

        /// <summary>
        /// Gets the IComponentTypeService.
        /// </summary>
        public virtual IComponentTypeService ComponentTypeService { get; private set; }

        /// <summary>
        /// Gets the IComputeService.
        /// </summary>
        public virtual IComputeService ComputeService { get; private set; }

        /// <summary>
        /// Gets the IComputeExpressionService.
        /// </summary>
        public virtual IComputeExpressionService ComputeExpressionService { get; private set; }

        /// <summary>
        /// Gets the IComputeValueService.
        /// </summary>
        public virtual IComputeValueService ComputeValueService { get; private set; }

        /// <summary>
        /// Gets the IConnectService.
        /// </summary>
        public virtual IConnectService ConnectService { get; private set; }

        /// <summary>
        /// Gets the IItemService.
        /// </summary>
        public virtual IItemService ItemService { get; private set; }

        /// <summary>
        /// Gets the IRequestService.
        /// </summary>
        public virtual IRequestService RequestService { get; private set; }

        /// <summary>
        /// Gets the IRequestPropertyService.
        /// </summary>
        public virtual IRequestPropertyService RequestPropertyService { get; private set; }

        /// <summary>
        /// Gets the ISubComputeService.
        /// </summary>
        public virtual ISubComputeService SubComputeService { get; private set; }

        /// <summary>
        /// Gets the IWebsocketCommandService.
        /// </summary>
        public virtual IWebsocketCommandService WebsocketCommandService { get; private set; }

        /// <summary>
        /// Gets the IWebsocketCommandPropertyService.
        /// </summary>
        public virtual IWebsocketCommandPropertyService WebsocketCommandPropertyService { get; private set; }

        /// <summary>
        /// Initializes a new instance of the NozomiApiClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public NozomiApiClient(string apiKey, params DelegatingHandler[] handlers) : base(handlers)
        {
            ApiKey = apiKey;
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the NozomiApiClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling NozomiApiClient.Dispose().
        /// False: will not dispose provided httpClient</param>
        public NozomiApiClient(string apiKey, HttpClient httpClient, bool disposeHttpClient) 
            : base(httpClient, disposeHttpClient)
        {
            ApiKey = apiKey;
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the NozomiApiClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public NozomiApiClient(string apiKey, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) 
            : base(rootHandler, handlers)
        {
            ApiKey = apiKey;
            Initialize();
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        private void CustomInitialize()
        {
            // Initialise the response message first.
            HttpResponseMessage = new HttpResponseMessage();
        }
        
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            ComponentService = new ComponentService(this);
            ComponentHistoricItemService = new ComponentHistoricItemService(this);
            ComponentTypeService = new ComponentTypeService(this);
            ComputeService = new ComputeService(this);
            ComputeExpressionService = new ComputeExpressionService(this);
            ComputeValueService = new ComputeValueService(this);
            ConnectService = new ConnectService(this);
            ItemService = new ItemService(this);
            RequestService = new RequestService(this);
            RequestPropertyService = new RequestPropertyService(this);
            SubComputeService = new SubComputeService(this);
            WebsocketCommandService = new WebsocketCommandService(this);
            WebsocketCommandPropertyService = new WebsocketCommandPropertyService(this);
            BaseUri = new System.Uri(NozomiConstants.ApiBaseUrl);
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
