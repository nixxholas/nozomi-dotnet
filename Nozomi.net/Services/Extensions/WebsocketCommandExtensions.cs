// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Nozomi.net
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WebsocketCommandService.
    /// </summary>
    public static partial class WebsocketCommandExtensions
    {
            /// <summary>
            /// Obtain all websocket commands you have created/own.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results in 100s.
            /// </param>
            public static object GET(this IWebsocketCommand operations, int? index = 0)
            {
                return operations.GETAsync(index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtain all websocket commands you have created/own.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results in 100s.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GETAsync(this IWebsocketCommand operations, int? index = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GETWithHttpMessagesAsync(index, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Obtain all of the websocket commands created, relative to the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestGuid'>
            /// The unique identifier of the request.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results in 100s.
            /// </param>
            public static object GET1(this IWebsocketCommand operations, string requestGuid = default(string), int? index = 0)
            {
                return operations.GET1Async(requestGuid, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtain all of the websocket commands created, relative to the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestGuid'>
            /// The unique identifier of the request.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results in 100s.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GET1Async(this IWebsocketCommand operations, string requestGuid = default(string), int? index = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GET1WithHttpMessagesAsync(requestGuid, index, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
