// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Nozomi.net
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ItemService.
    /// </summary>
    public static partial class ItemExtensions
    {
            /// <summary>
            /// Obtains all of the relevant items you own.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results of every x items.
            /// </param>
            public static object GET(this IItemService operations, int index)
            {
                return operations.GETAsync(index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtains all of the relevant items you own.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results of every x items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GETAsync(this IItemService operations, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GETWithHttpMessagesAsync(index, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the item.
            /// </param>
            public static string POST(this IItemService operations, CreateItemInputModel body = default(CreateItemInputModel))
            {
                return operations.POSTAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> POSTAsync(this IItemService operations, CreateItemInputModel body = default(CreateItemInputModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.POSTWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validates if the slug is being used.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='slug'>
            /// The unique identifier of the item.
            /// </param>
            /// <param name='local'>
            /// If you want to only check the slugs you own.
            /// </param>
            public static object GET1(this IItemService operations, string slug, bool? local = false)
            {
                return operations.GET1Async(slug, local).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates if the slug is being used.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='slug'>
            /// The unique identifier of the item.
            /// </param>
            /// <param name='local'>
            /// If you want to only check the slugs you own.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GET1Async(this IItemService operations, string slug, bool? local = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GET1WithHttpMessagesAsync(slug, local, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Obtains the specified item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemGuid'>
            /// The unique identifier of the item.
            /// </param>
            public static object GET2(this IItemService operations, string itemGuid)
            {
                return operations.GET2Async(itemGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtains the specified item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemGuid'>
            /// The unique identifier of the item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GET2Async(this IItemService operations, string itemGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GET2WithHttpMessagesAsync(itemGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Obtains the specified item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='slug'>
            /// The unique slug of the item.
            /// </param>
            public static object GET3(this IItemService operations, string slug)
            {
                return operations.GET3Async(slug).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtains the specified item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='slug'>
            /// The unique slug of the item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GET3Async(this IItemService operations, string slug, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GET3WithHttpMessagesAsync(slug, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the specified item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters the value you want to update on an item.
            /// </param>
            public static string PUT(this IItemService operations, UpdateItemInputModel body = default(UpdateItemInputModel))
            {
                return operations.PUTAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the specified item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters the value you want to update on an item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PUTAsync(this IItemService operations, UpdateItemInputModel body = default(UpdateItemInputModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PUTWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
