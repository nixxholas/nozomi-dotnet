// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Threading;
using System.Threading.Tasks;

namespace Nozomi.net.Services.Extensions
{
    /// <summary>
    /// Extension methods for ComputeService.
    /// </summary>
    public static partial class ComputeExtensions
    {
            /// <summary>
            /// Obtains all of the relevant computes you own.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results of every x items.
            /// </param>
            public static object All(this IComputeService operations, int index)
            {
                return AllAsync(operations, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtains all of the relevant computes you own.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results of every x items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AllAsync(this IComputeService operations, int index, 
                CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllAsync(index, cancellationToken)
                    .ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Obtains the specific compute.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The Guid of the compute in question.
            /// </param>
            public static object Get(this IComputeService operations, string guid)
            {
                return GetAsync(operations, guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtains the specific compute.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The Guid of the compute in question.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IComputeService operations, string guid, 
                CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAsync(guid, cancellationToken)
                    .ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
