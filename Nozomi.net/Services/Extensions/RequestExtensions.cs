// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Nozomi.net
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RequestService.
    /// </summary>
    public static partial class RequestExtensions
    {
            /// <summary>
            /// Retrieves all requests owned by the stated user with a pagination of 100
            /// items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the request list you're viewing
            /// </param>
            public static object GET(this IRequestService operations, int? index = 0)
            {
                return operations.GETAsync(index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all requests owned by the stated user with a pagination of 100
            /// items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the request list you're viewing
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GETAsync(this IRequestService operations, int? index = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GETWithHttpMessagesAsync(index, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the request.
            /// </param>
            public static string POST(this IRequestService operations, CreateRequestInputModel body = default(CreateRequestInputModel))
            {
                return operations.POSTAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> POSTAsync(this IRequestService operations, CreateRequestInputModel body = default(CreateRequestInputModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.POSTWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique ID of the request.
            /// </param>
            public static string DELETE(this IRequestService operations, string guid)
            {
                return operations.DELETEAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique ID of the request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DELETEAsync(this IRequestService operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DELETEWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the request with the mentioned guid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// Guid of the request
            /// </param>
            public static object GET1(this IRequestService operations, string guid)
            {
                return operations.GET1Async(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the request with the mentioned guid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// Guid of the request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GET1Async(this IRequestService operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GET1WithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the request.
            /// </param>
            public static string PUT(this IRequestService operations, UpdateRequestInputModel body = default(UpdateRequestInputModel))
            {
                return operations.PUTAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PUTAsync(this IRequestService operations, UpdateRequestInputModel body = default(UpdateRequestInputModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PUTWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
