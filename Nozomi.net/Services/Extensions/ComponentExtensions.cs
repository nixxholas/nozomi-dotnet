// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Nozomi.net
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ComponentService.
    /// </summary>
    public static partial class ComponentExtensions
    {
            /// <summary>
            /// Obtain all components you have created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestGuid'>
            /// The unique identifier of the request that contains this component.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results in 100s
            /// </param>
            public static object GET(this IComponentService operations, string requestGuid, int? index = 0)
            {
                return operations.GETAsync(requestGuid, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtain all components you have created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestGuid'>
            /// The unique identifier of the request that contains this component.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of results in 100s
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GETAsync(this IComponentService operations, string requestGuid, int? index = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GETWithHttpMessagesAsync(requestGuid, index, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a component.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the component.
            /// </param>
            public static string POST(this IComponentService operations, CreateComponentInputModel body = default(CreateComponentInputModel))
            {
                return operations.POSTAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a component.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the component.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> POSTAsync(this IComponentService operations, CreateComponentInputModel body = default(CreateComponentInputModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.POSTWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a component.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the component to delete.
            /// </param>
            public static string DELETE(this IComponentService operations, string guid = default(string))
            {
                return operations.DELETEAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a component.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the component to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DELETEAsync(this IComponentService operations, string guid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DELETEWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Obtain the component and its historical values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the component.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of historical values in 100s
            /// </param>
            public static object GET1(this IComponentService operations, string guid, int? index = 0)
            {
                return operations.GET1Async(guid, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtain the component and its historical values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the component.
            /// </param>
            /// <param name='index'>
            /// The 'page' of the list of historical values in 100s
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GET1Async(this IComponentService operations, string guid, int? index = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GET1WithHttpMessagesAsync(guid, index, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a component.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the component.
            /// </param>
            public static string PUT(this IComponentService operations, UpdateComponentInputModel body = default(UpdateComponentInputModel))
            {
                return operations.PUTAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a component.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The supposed properties/parameters of the component.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PUTAsync(this IComponentService operations, UpdateComponentInputModel body = default(UpdateComponentInputModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PUTWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
